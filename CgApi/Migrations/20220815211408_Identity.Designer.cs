// <auto-generated />
using System;
using CgApi;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CgApi.Migrations
{
    [DbContext(typeof(cursodev_grupo2Context))]
    [Migration("20220815211408_Identity")]
    partial class Identity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CgApi.TbBanco", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("FkMoeda")
                        .HasColumnType("int")
                        .HasColumnName("FK_Moeda");

                    b.Property<string>("Nome")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TpConta")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Tp_Conta");

                    b.HasKey("Id");

                    b.HasIndex("FkMoeda");

                    b.ToTable("Tb_Banco", (string)null);
                });

            modelBuilder.Entity("CgApi.TbCliente", b =>
                {
                    b.Property<int>("Cpf")
                        .HasColumnType("int")
                        .HasColumnName("CPF");

                    b.Property<int?>("FkPais")
                        .HasColumnType("int")
                        .HasColumnName("FK_Pais");

                    b.Property<string>("Nome")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("NOME");

                    b.Property<int?>("Telefone")
                        .HasColumnType("int");

                    b.HasKey("Cpf")
                        .HasName("PK__Tb_Clien__C1F897300AE41B7B");

                    b.HasIndex("FkPais");

                    b.ToTable("Tb_Cliente", (string)null);
                });

            modelBuilder.Entity("CgApi.TbContasContabeis", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<decimal?>("Despesas")
                        .HasColumnType("money");

                    b.Property<int?>("FkBanco")
                        .HasColumnType("int")
                        .HasColumnName("FK_Banco");

                    b.Property<decimal?>("Lucro")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("FkBanco");

                    b.ToTable("Tb_Contas_Contabeis", (string)null);
                });

            modelBuilder.Entity("CgApi.TbEmpresa", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("Cnpj")
                        .HasColumnType("int")
                        .HasColumnName("CNPJ");

                    b.Property<string>("Endereco")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("FkContasContabeis")
                        .HasColumnType("int")
                        .HasColumnName("FK_Contas_Contabeis");

                    b.Property<string>("Nome")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("FkContasContabeis");

                    b.ToTable("Tb_Empresa", (string)null);
                });

            modelBuilder.Entity("CgApi.TbFuncionario", b =>
                {
                    b.Property<int>("Matricula")
                        .HasColumnType("int");

                    b.Property<int?>("Cpf")
                        .HasColumnType("int")
                        .HasColumnName("CPF");

                    b.Property<int?>("FkEmpresa")
                        .HasColumnType("int")
                        .HasColumnName("FK_Empresa");

                    b.Property<string>("Nome")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Matricula")
                        .HasName("PK__Tb_Funci__0FB9FB4E569A671E");

                    b.HasIndex("FkEmpresa");

                    b.ToTable("Tb_Funcionario", (string)null);
                });

            modelBuilder.Entity("CgApi.TbMoeda", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Tb_Moeda", (string)null);
                });

            modelBuilder.Entity("CgApi.TbPais", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Tb_Pais", (string)null);
                });

            modelBuilder.Entity("CgApi.TbProjeto", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("Cpf")
                        .HasColumnType("int")
                        .HasColumnName("CPF");

                    b.Property<int?>("FkCliente")
                        .HasColumnType("int")
                        .HasColumnName("FK_Cliente");

                    b.Property<int?>("FkFuncionario")
                        .HasColumnType("int")
                        .HasColumnName("FK_Funcionario");

                    b.Property<string>("Nome")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("FkCliente");

                    b.HasIndex("FkFuncionario");

                    b.ToTable("Tb_Projeto", (string)null);
                });

            modelBuilder.Entity("JWTAuthentication.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CgApi.TbBanco", b =>
                {
                    b.HasOne("CgApi.TbMoeda", "FkMoedaNavigation")
                        .WithMany("TbBanco")
                        .HasForeignKey("FkMoeda")
                        .HasConstraintName("FK__Tb_Banco__FK_Moe__31EC6D26");

                    b.Navigation("FkMoedaNavigation");
                });

            modelBuilder.Entity("CgApi.TbCliente", b =>
                {
                    b.HasOne("CgApi.TbPais", "FkPaisNavigation")
                        .WithMany("TbCliente")
                        .HasForeignKey("FkPais")
                        .HasConstraintName("FK__Tb_Client__FK_Pa__3C69FB99");

                    b.Navigation("FkPaisNavigation");
                });

            modelBuilder.Entity("CgApi.TbContasContabeis", b =>
                {
                    b.HasOne("CgApi.TbBanco", "FkBancoNavigation")
                        .WithMany("TbContasContabeis")
                        .HasForeignKey("FkBanco")
                        .HasConstraintName("FK__Tb_Contas__FK_Ba__34C8D9D1");

                    b.Navigation("FkBancoNavigation");
                });

            modelBuilder.Entity("CgApi.TbEmpresa", b =>
                {
                    b.HasOne("CgApi.TbContasContabeis", "FkContasContabeisNavigation")
                        .WithMany("TbEmpresa")
                        .HasForeignKey("FkContasContabeis")
                        .HasConstraintName("FK__Tb_Empres__FK_Co__37A5467C");

                    b.Navigation("FkContasContabeisNavigation");
                });

            modelBuilder.Entity("CgApi.TbFuncionario", b =>
                {
                    b.HasOne("CgApi.TbEmpresa", "FkEmpresaNavigation")
                        .WithMany("TbFuncionario")
                        .HasForeignKey("FkEmpresa")
                        .HasConstraintName("FK__Tb_Funcio__FK_Em__3F466844");

                    b.Navigation("FkEmpresaNavigation");
                });

            modelBuilder.Entity("CgApi.TbProjeto", b =>
                {
                    b.HasOne("CgApi.TbCliente", "FkClienteNavigation")
                        .WithMany("TbProjeto")
                        .HasForeignKey("FkCliente")
                        .HasConstraintName("FK__Tb_Projet__FK_Cl__4222D4EF");

                    b.HasOne("CgApi.TbFuncionario", "FkFuncionarioNavigation")
                        .WithMany("TbProjeto")
                        .HasForeignKey("FkFuncionario")
                        .HasConstraintName("FK__Tb_Projet__FK_Fu__4316F928");

                    b.Navigation("FkClienteNavigation");

                    b.Navigation("FkFuncionarioNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("JWTAuthentication.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("JWTAuthentication.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JWTAuthentication.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("JWTAuthentication.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CgApi.TbBanco", b =>
                {
                    b.Navigation("TbContasContabeis");
                });

            modelBuilder.Entity("CgApi.TbCliente", b =>
                {
                    b.Navigation("TbProjeto");
                });

            modelBuilder.Entity("CgApi.TbContasContabeis", b =>
                {
                    b.Navigation("TbEmpresa");
                });

            modelBuilder.Entity("CgApi.TbEmpresa", b =>
                {
                    b.Navigation("TbFuncionario");
                });

            modelBuilder.Entity("CgApi.TbFuncionario", b =>
                {
                    b.Navigation("TbProjeto");
                });

            modelBuilder.Entity("CgApi.TbMoeda", b =>
                {
                    b.Navigation("TbBanco");
                });

            modelBuilder.Entity("CgApi.TbPais", b =>
                {
                    b.Navigation("TbCliente");
                });
#pragma warning restore 612, 618
        }
    }
}
